; FDL - Factorio Description Language

; If two different red wires touch the same port, that's an error.
; If two different green wires touch the same port, that's an error.
; If a yellow wire and any other wire touch the same port, that's an error.

; A wire connected to an externally facing out port may not also be connected to an internal in port.
; A wire connected to an externally facing in port may not also be connected to an internal out port.

; Yellow wires may be connected externally to a red, a green wire, or both,
; and become the appropriate color internally. When connected to both a red and green wire,
; two wires are generated internally.

; You are allowed to flip the interface colors when you use a part.
; This will cause all internal signal colors to flip.

; (notsigs a b c ...) returns a signal that is not any of a, b, c...

; "scm" is a good scheme interpreter. http://people.csail.mit.edu/jaffer/SCM

; Reserved symbols:
;   * decpart ?
;   * defpart
;   * defmacro
;   * signal
;   * symbol
;   * red
;   * green
;   * yellow
;   * in
;   * out
;   * each
;   * any
;   * everything
;   * inout ?
;   * either ?
;   * enum ?
;   * one ?
;   * input-count ?
;   * decider-output-type ?

; TODO Many of these circuits suffer from ragged timing between their inputs and outputs.
;      Develop an automated way to test for this.

;; TODO Is any of this crap actually useful?
;(enum decider-output-type one input-count)
;
;(decpart constant
;    ((out yellow o)
;     ((list (tuple signal int)) signal-count-list)))
;
;(decpart arithmetic
;    ((in yellow i)
;     (out yellow o)
;     (symbol operation)
;     (signal lhs)
;     ((either signal int) rhs)
;     (signal result)))
;
;(decpart decider
;    ((in yellow i)
;     (out yellow o)
;     (symbol operation)
;     (signal lhs)
;     ((either signal int) rhs)
;     (signal result)
;     (decider-output-type output-type)))

;(defpart main ()
;    (green a)
;    (green b)
;    (green c)
;    (green d)
;    (green e)
;
;    (constant a ((sig:signal-a 42) (sig:signal-b 346) (sig:signal-c -3)))
;    (constant b ((sig:signal-a 7) (sig:signal-d 11) (sig:signal-e 4)))
;    (constant c ((sig:signal-f 47) (sig:signal-b 2) (sig:signal-g 8)))
;    (constant d ((sig:signal-a 1) (sig:signal-b 2) (sig:signal-c 3)))
;    (constant e ((sig:signal-z 22) (sig:signal-y -9) (sig:signal-x 4)))
;
;    (green o)
;    (green control)
;    (mux-5-circuits a b c d e o control sig:signal-a)
;
;    (constant control ((sig:signal-a 1) (sig:signal-c 1) (sig:signal-t 1) (sig:signal-r 1)))
;    (constant o ((sig:signal-o 1))))

(defpart main ()
    (green i)
    (green o)
    (green control)
    (demux-signals i o control sig:signal-a sig:signal-a)

    (constant i ((sig:signal-a 42)))
    (constant control ((sig:signal-a 1)))
    (constant o ((sig:signal-o 1))))

;(defmacro gen-mux-signals "test.scm")
;(gen-mux-signals)

(defmacro gen-demux-signals "test.scm")
(gen-demux-signals)

;(defmacro gen-mux-n-circuits "test.scm")
;(gen-mux-n-circuits 2)
;(gen-mux-n-circuits 3)
;(gen-mux-n-circuits 4)
;(gen-mux-n-circuits 5)

;(defmacro gen-demux-n-circuits "test.scm")
;(gen-demux-n-circuits 2)
;(gen-demux-n-circuits 3)
;(gen-demux-n-circuits 4)
;(gen-demux-n-circuits 5)

(defpart split-bits-in-two
  ((in yellow full)
   (out yellow lo)
   (out yellow hi))

  (arithmetic full lo each & 0xffff each)

  (green hi-unmasked)
  (arithmetic full hi-unmasked each >> 16 each)
  (arithmetic hi-unmasked hi each & 0xffff each))

(defpart join-bits-from-two
  ((in yellow lo)
   (in yellow hi)
   (out yellow full))

  (arithmetic hi full each << 16 each)
  (buffer lo full))

; filters is 1 or 0 for every single signal.
; For signals where filters is 1, the value from values-in is written to values-out.
(defpart filter-all
  ((in yellow values-in)
   (out yellow values-out)
   (in yellow filters))

  (green lo-in)
  (red hi-in)
  (split-bits-in-two value-in lo-in hi-in)

  (arithmetic filters (lo-in hi-in) each << 16 each)

  (green lo-out)
  (red hi-out)
  (decider lo-in lo-out each > 0xffff each input-count)
  (decider hi-in hi-out each > 0xffff each input-count)

  (join-bits-from-two lo-out hi-out values-out))

; i is 1 or 0 for every single signal.
; o is the opposite.
(defpart invert-all
  ((in green i)
   (out yellow o))

  (red all-ones)
  (decider () all-ones signal-a == 0 everything one)

  (decider (all-ones i) o each == 2 each one))

; reset-control is 1 or 0 for every single signal.
; The latch operates independently on all signals simultaneously.
(defpart latch
  ((in yellow values-in)
   (out red values-out)
   (in yellow take-new-values))

  (green take-old-values)
  (invert-all take-new-values take-old-values)

  (green old-values)
  (filter-all values-in values-out take-new-values)
  (filter-all old-values (old-values values-out) take-old-values))
