(load "circuits/util.fdl")

(defpart split-bits-in-two
  ((in yellow full)
   (out yellow lo)
   (out yellow hi))

  (green lo-too-early)
  (arithmetic full lo-too-early each & 0xffff each)
  (buffer lo-too-early lo)

  (green hi-unmasked)
  (arithmetic full hi-unmasked each >> 16 each)
  (arithmetic hi-unmasked hi each & 0xffff each))

(defpart join-bits-from-two
  ((in yellow lo)
   (in yellow hi)
   (out yellow full))

  (arithmetic hi full each << 16 each)
  (buffer lo full))

; filters is 1 or 0 for every single signal.
; For signals where filters is 1, the value from values-in is written to values-out.
(defpart filter-all
  ((in yellow values-in)
   (out yellow values-out)
   (in yellow filters))

  (green lo-in)
  (red hi-in)
  (split-bits-in-two values-in lo-in hi-in)

  (green filters-delayed)
  (buffer filters filters-delayed)
  (arithmetic filters-delayed (lo-in hi-in) each << 16 each)

  (green lo-out-unmasked)
  (red hi-out-unmasked)
  (decider lo-in lo-out-unmasked each > 0xffff each input-count)
  (decider hi-in hi-out-unmasked each > 0xffff each input-count)

  (green lo-out)
  (red hi-out)
  (arithmetic lo-out-unmasked lo-out each & 0xffff each)
  (arithmetic hi-out-unmasked hi-out each & 0xffff each)

  (join-bits-from-two lo-out hi-out values-out))

; i is 1 or 0 for every single signal.
; o is the opposite.
; invert-all is much bigger than invert-all*.
(defpart invert-all
  ((in green i)
   (out yellow o))
  (red all-ones)
  (constant-all-ones all-ones)
  (invert-all* i o all-ones))

; just like invert-all, except that
; all-ones is the output of constant-all-ones
; (a big part we can deduplicate).
(defpart invert-all*
  ((in green i)
   (out yellow o)
   (in red all-ones))
  (decider (all-ones i) o each == 1 each one))

; take-new-values is 1 or 0 for every single signal.
; The latch operates independently on all signals simultaneously.
; Effectively, this is 258 independently controllable banks of 32 D-Latches.
; When setting values, you MUST keep the input values and the
; set signals stable for 5 ticks.
; latch is somewhat larger than latch*.
(defpart latch
  ((in yellow values-in)
   (out red values-out)
   (in red take-new-values))
  (green all-ones)
  (constant-all-ones all-ones)
  (latch* values-in values-out take-new-values all-ones))

; just like latch, except that
; all-ones is the output of constant-all-ones
; (a big part we can deduplicate).
(defpart latch*
  ((in yellow values-in)
   (out red values-out)
   (in red take-new-values)
   (in green all-ones))

  (green take-old-values-delayed)
  (invert-all* take-new-values take-old-values-delayed all-ones)

  (green take-new-values-delayed)
  (buffer take-new-values take-new-values-delayed)

  (green values-in-delayed)
  (buffer values-in values-in-delayed)

  (green old-values)
  (filter-all values-in-delayed (old-values values-out) take-new-values-delayed)
  (filter-all old-values (old-values values-out) take-old-values-delayed))
